"""Module with middleware for logging access to protected pages without
authorization and  for processing error pages 404, 500 and for it logging"""

import logging

from django.conf import settings
from django.shortcuts import redirect, render

# Logger setup to capture logs for this module
logger = logging.getLogger(__name__)


class ProtectedPageLoggerMiddleware: # pylint: disable=too-few-public-methods
    """
    Middleware for logging attempts to access protected pages without
    authorization.

    This middleware intercepts requests to pages that require authentication
    and
    checks if the user is authenticated. If the user is not authenticated and
    tries to access a protected page, it logs a warning and redirects to the
    login page.
    """

    def __init__(self, get_response):
        """
        Initializes the middleware. The get_response argument is a callable
        that will return the response after processing the request.

        Args:
            get_response (callable): A callable that processes the request
            and returns a response.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Handles the request and checks if the user is authenticated. If the
        user
        is not authenticated and tries to access a protected page, it logs a
        warning
        and redirects the user to the login page.

        Args:
            request (HttpRequest): The request object containing metadata
            and user information.

        Returns:
            HttpResponseRedirect or Response: A redirect to the login page
            if unauthorized,
                                              or the response generated by
                                              the view otherwise.
        """
        if not request.user.is_authenticated and request.path in ['/']:
            # Log the unauthorized access attempt
            logger.warning(
                "Unauthorized access to protected page: %s | IP: %s",
                request.path, request.META.get('REMOTE_ADDR')
            )
            # Redirect the user to the login page
            return redirect(settings.LOGIN_REDIRECT_URL)

        # Continue processing the request if authenticated or path is not
        # protected
        response = self.get_response(request)
        return response


class CustomErrorHandlerMiddleware: # pylint: disable=too-few-public-methods
    """
    Middleware for handling and logging errors (404 and 500 errors).

    This middleware processes errors such as 404 (Page Not Found) and 500 (
    Internal Server Error),
    logs the details of the error, and renders custom error pages with the
    respective status codes.
    """

    def __init__(self, get_response):
        """
        Initializes the middleware. The get_response argument is a callable
        that will return the response after processing the request.

        Args:
            get_response (callable): A callable that processes the request
            and returns a response.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Handles the request and checks if the response has a status code
        indicating an error (404 or 500).
        If an error occurs, it logs the error and renders the appropriate
        error page.

        Args:
            request (HttpRequest): The request object containing metadata
            and user information.

        Returns:
            HttpResponse: A custom error page with the respective status
            code (404 or 500) if an error occurred,
                          or the response generated by the view otherwise.
        """
        response = self.get_response(request)

        if response.status_code == 404:
            # Log the 404 error
            logger.error(
                "404 Not Found: %s | IP: %s", request.path,
                request.META.get('REMOTE_ADDR')
            )
            # Render custom 404 error page
            return render(request, 'errors/404.html', status=404)

        if response.status_code == 500:
            # Log the 500 error
            logger.critical(
                "500 Internal Server Error: %s | IP: %s", request.path,
                request.META.get('REMOTE_ADDR')
            )
            # Render custom 500 error page
            return render(request, 'errors/500.html', status=500)

        return response
